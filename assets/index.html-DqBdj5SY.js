import{_ as a,c as t,f as p,o as n}from"./app-t7sSfxVc.js";const r={};function i(o,e){return n(),t("div",null,e[0]||(e[0]=[p('<h2 id="网络分层" tabindex="-1"><a class="header-anchor" href="#网络分层"><span>网络分层</span></a></h2><p>最早的OSI七层模型，教学用的五层模型，实际使用的TCP/IP四层模型：网络接口层（电信号转换为二进制数据）、网络层（IP、ARP，寻找目标位置，提供尽最大努力交付，不可靠传输）、传输层（TCP、UDP，可靠传输和不可靠传输）、应用层（HTTP、FTP、DNS，给具体软件使用）。</p><p>TCP/IP协议不仅仅指的是TCP和IP两个协议，⽽是指的⼀个由<code>FTP,SMTP,TCP,UDP,IP,ARP</code>等等协议构成的<strong>协议集合</strong>。</p><h2 id="socket" tabindex="-1"><a class="header-anchor" href="#socket"><span>Socket</span></a></h2><p>在网络中采用发送方和接收方的套接字组合来识别端点，套接字唯一标识了网络中的一个主机和它上的一个进程。</p><p>套接字（Socket）=（主机IP地址，端口号）</p><p>IP可以让我们知道目标机器位置，端口号可以让我知道具体是哪个进程或者说哪个软件使用的数据。</p><h2 id="tcp协议" tabindex="-1"><a class="header-anchor" href="#tcp协议"><span>TCP协议</span></a></h2><p>面向连接（虚连接），可靠传输，无差错、不丢失、不重复、按序到达。可靠有序，不丢不重。</p><p>TCP提供全双工通信。</p><p>发送缓存：准备发送的数据&amp;已发送但尚未收到确认的数据。</p><p>接收缓存：按序到达但尚未被接受应用程序读取的数据&amp;不按序到达的数据。</p><p>TCP把应用程序交下来的数据看成仅仅是一连串的无结构的字节流。再把数据加上TCP头部，包括端口信息、序号、确认号等等校验信息，传给下层的IP协议。</p><h3 id="面向连接" tabindex="-1"><a class="header-anchor" href="#面向连接"><span>面向连接</span></a></h3><h4 id="三次握手" tabindex="-1"><a class="header-anchor" href="#三次握手"><span>三次握手</span></a></h4><p>客户端连接请求、服务端确认连接请求、客户端确认收到确认。</p><h4 id="四次挥手" tabindex="-1"><a class="header-anchor" href="#四次挥手"><span>四次挥手</span></a></h4><p>客户端告知连接释放、服务器确认收到、服务器告知连接释放、客户端告知收到。</p><h3 id="tcp数据包" tabindex="-1"><a class="header-anchor" href="#tcp数据包"><span>TCP数据包</span></a></h3><p>以太网数据包（packet）的大小是固定的，而且每一层协议都有自己的头部信息，所以再减去预留给每层协议的大小，每个TCP数据包其实是很小的。</p><ul><li>给数据包编号，第一个包编号随机，假设第一个是100，第二个就是101。</li><li>收到 TCP 数据包以后，组装还原是操作系统完成的，组装好了通过端口交给上层协议继续处理。</li></ul><h3 id="可靠传输" tabindex="-1"><a class="header-anchor" href="#可靠传输"><span>可靠传输</span></a></h3><ul><li>头部校验，是不是TCP数据</li><li>序号，这是第几个数据包</li><li>确认与重传，收到就确认，没收到就告知要重传</li></ul><h3 id="流量控制" tabindex="-1"><a class="header-anchor" href="#流量控制"><span>流量控制</span></a></h3><p>目的是让发送方慢点，要让接收方来得及接收。</p><p>TCP利用<strong>滑动窗口机制</strong>实现流量控制。</p><p>在通信过程中，接收方根据自己接收缓存的大小，<strong>动态地调整发送方的发送窗口大小</strong>。</p><h3 id="拥塞控制" tabindex="-1"><a class="header-anchor" href="#拥塞控制"><span>拥塞控制</span></a></h3><p>客户端和服务端建立连接后，双方通过流量控制得到发送窗口与拥塞窗口，但是这个窗口只是针对主机与服务器的性能而决定的，整个网络的拥塞程度才决定了发送出去的数据到底能不能到达，所以可以把拥塞控制看成一个共同维护网络通畅的君子协定。</p><p>慢开始和拥塞避免：开始时发送一个数据包，收到响应后再发送两个（指数增长），当到达阈值<code>ssthresh</code>后，变为加法增长。当出现丢包的时候判断为网络拥塞，再回归到初始的一个数据包，并设置新的阈值，重复之前的操作。</p><p>快重传和快恢复：快重传与快恢复是针对上面方法的升级版，区别就是当出现网络拥塞时恢复到新的阈值水平加法增长，而不是初始值。</p>',31)]))}const c=a(r,[["render",i],["__file","index.html.vue"]]),h=JSON.parse('{"path":"/article/y3gxn62l/","title":"TCP简述","lang":"zh-CN","frontmatter":{"title":"TCP简述","tags":["技术"],"createTime":"2024/01/28","permalink":"/article/y3gxn62l/","description":"网络分层 最早的OSI七层模型，教学用的五层模型，实际使用的TCP/IP四层模型：网络接口层（电信号转换为二进制数据）、网络层（IP、ARP，寻找目标位置，提供尽最大努力交付，不可靠传输）、传输层（TCP、UDP，可靠传输和不可靠传输）、应用层（HTTP、FTP、DNS，给具体软件使用）。 TCP/IP协议不仅仅指的是TCP和IP两个协议，⽽是指的⼀个...","head":[["meta",{"property":"og:url","content":"https://jyqwq.github.io/rainbow/article/y3gxn62l/"}],["meta",{"property":"og:site_name","content":"纸上的彩虹"}],["meta",{"property":"og:title","content":"TCP简述"}],["meta",{"property":"og:description","content":"网络分层 最早的OSI七层模型，教学用的五层模型，实际使用的TCP/IP四层模型：网络接口层（电信号转换为二进制数据）、网络层（IP、ARP，寻找目标位置，提供尽最大努力交付，不可靠传输）、传输层（TCP、UDP，可靠传输和不可靠传输）、应用层（HTTP、FTP、DNS，给具体软件使用）。 TCP/IP协议不仅仅指的是TCP和IP两个协议，⽽是指的⼀个..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-03T09:57:32.000Z"}],["meta",{"property":"article:tag","content":"技术"}],["meta",{"property":"article:modified_time","content":"2024-12-03T09:57:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"TCP简述\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-12-03T09:57:32.000Z\\",\\"author\\":[]}"]]},"headers":[],"readingTime":{"minutes":3.25,"words":975},"git":{"updatedTime":1733219852000,"contributors":[{"name":"yuan.ji","email":"yuan.ji@ly.com","commits":1,"avatar":"https://avatars.githubusercontent.com/yuan.ji?v=4","url":"https://github.com/yuan.ji"}]},"autoDesc":true,"filePathRelative":"日常学习/TCP简述.md","categoryList":[{"id":"9a91b4","sort":10003,"name":"日常学习"}],"bulletin":false}');export{c as comp,h as data};
