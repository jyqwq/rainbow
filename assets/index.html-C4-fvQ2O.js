import{_ as i,c as a,f as n,o as t}from"./app-_cZTuvS3.js";const e={};function l(p,s){return t(),a("div",null,s[0]||(s[0]=[n(`<h2 id="函数即对象" tabindex="-1"><a class="header-anchor" href="#函数即对象"><span>函数即对象</span></a></h2><h3 id="对象" tabindex="-1"><a class="header-anchor" href="#对象"><span>对象</span></a></h3><p>首先，JS中对象的值可以是任意类型的数据，如下代码所示：</p><div class="language-javascript line-numbers-mode" data-ext="javascript" data-title="javascript"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">var</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> person</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Object</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">person</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">firstname</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">John</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">person</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">lastname</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Doe</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">person</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">info</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Object</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">person</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">info</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">age</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">50</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">person</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">info</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">eyecolor</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">blue</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">person</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">showinfo</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> function</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (){</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">/*...*/</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码内存布局如下：</p><p><img src="https://file.40017.cn/baoxian/health/health_public/images/blog/blog-127.png" alt="img"></p><p>对象的属性值有三种类型：</p><ul><li><p><strong>原始类型</strong>：所谓的原始类的数据，是指值本身无法被改变，比如 JS 中的字符串就是原始类型，如果你修改了 JS 中字符串的值，那么 V8 会返回给你一个新的字符串，原始字符串并没有被改变，我们称这些类型的值为“原始值”。</p><p>JS 中的原始值主要包括 <code>null、undefined、boolean、number、string、bigint、symbol</code> 这七种。</p></li><li><p><strong>对象类型</strong>：对象的属性值也可以是另外一个对象。</p></li><li><p><strong>函数类型</strong>：如果对象中的属性值是函数，那么我们把这个属性称为方法，所以我们又说对象具备属性和方法。</p></li></ul><h3 id="函数对象" tabindex="-1"><a class="header-anchor" href="#函数对象"><span>函数对象</span></a></h3><p>在 V8 内部，会为函数对象添加了两个隐藏属性，具体属性如下图所示：</p><p><img src="https://file.40017.cn/baoxian/health/health_public/images/blog/blog-128.png" alt="img"></p><p>也就是说，函数除了可以拥有常用类型的属性值之外，<strong>还拥有两个隐藏属性，分别是 name 属性和 code 属性</strong>。</p><p>隐藏 name 属性的值就是函数名称，如果某个函数没有设置函数名，如下面这段函数：</p><div class="language-js line-numbers-mode" data-ext="js" data-title="js"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (){</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    var</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> test</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">test</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">})()</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该函数对象的默认的 name 属性值就是 <code>anonymous</code>，表示该函数对象没有被设置名称。</p><p>另外一个隐藏属性是 code 属性，其值表示函数代码，以字符串的形式存储在内存中。<strong>当执行到一个函数调用语句时，V8 便会从函数对象中取出 code 属性值，也就是函数代码，然后再解释执行这段函数代码。</strong></p><p>一个函数到底关联了哪些内容：</p><ul><li>函数作为一个对象，它有自己的属性和值，所以函数关联了基础的属性和值。</li><li>函数之所以成为特殊的对象，这个特殊的地方是函数可以“被调用”，所以一个函数被调用时，它还需要关联相关的执行上下文。</li></ul><p>结合以上两点，JavaScript 中的函数就实现了“<strong>函数是一等公民</strong>”的特性。</p><h3 id="函数声明与函数表达式" tabindex="-1"><a class="header-anchor" href="#函数声明与函数表达式"><span>函数声明与函数表达式</span></a></h3><p><img src="https://file.40017.cn/baoxian/health/health_public/images/blog/blog-129.png" alt="img"></p><p>如上图的两段代码，执行结果是左边的正确执行，右边的报错 <code>Uncaught TypeError: foo is not a function</code> 。</p><p>其主要原因是这两种定义函数的方式具有不同语义，不同的语义触发了不同的行为。</p><p><img src="https://file.40017.cn/baoxian/health/health_public/images/blog/blog-130.png" alt="img"></p><p>因为语义不同，所以我们给这两种定义函数的方式使用了不同的名称，第一种称之为<strong>函数声明</strong>，第二种称之为<strong>函数表达式</strong>。</p><h3 id="v8处理函数声明" tabindex="-1"><a class="header-anchor" href="#v8处理函数声明"><span>V8处理函数声明</span></a></h3><p>V8 在执行 JavaScript 的过程中，会先对其进行编译，然后再执行，比如下面这段代码：</p><div class="language-js line-numbers-mode" data-ext="js" data-title="js"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">var</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> x</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 5</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> foo</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(){</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Foo</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://file.40017.cn/baoxian/health/health_public/images/blog/blog-131.png" alt="img"></p><p>我们可以看到，作用域Scrope中包含了变量 x 和 foo，变量 x 的默认值是 undefined，变量 foo 指向了 foo 函数对象，foo 函数对象被 V8 存放在内存中的堆空间了，这些变量都是在编译阶段被装进作用域中的。</p><p>因为在执行之前，这些变量都被提升到作用域中了，所以在执行阶段，V8 当然就能获取到所有的定义变量了。我们把这种在编译阶段，将所有的变量提升到作用域的过程称为<strong>变量提升</strong>。</p><p>对于变量提升，函数和普通的对象还是存在一些差异的</p><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章"><span>参考文章</span></a></h2><p><a href="https://time.geekbang.org/column/intro/100048001?tab=catalog" target="_blank" rel="noopener noreferrer">图解 V8</a></p>`,34)]))}const r=i(e,[["render",l],["__file","index.html.vue"]]),k=JSON.parse('{"path":"/article/d4bvps84/","title":"V8引擎","lang":"zh-CN","frontmatter":{"title":"V8引擎","tags":["面试","浏览器","待续"],"createTime":"2022/02/25","permalink":"/article/d4bvps84/","description":"函数即对象 对象 首先，JS中对象的值可以是任意类型的数据，如下代码所示： 上述代码内存布局如下： img 对象的属性值有三种类型： 原始类型：所谓的原始类的数据，是指值本身无法被改变，比如 JS 中的字符串就是原始类型，如果你修改了 JS 中字符串的值，那么 V8 会返回给你一个新的字符串，原始字符串并没有被改变，我们称这些类型的值为“原始值”。 J...","head":[["meta",{"property":"og:url","content":"https://jyqwq.github.io/rainbow/article/d4bvps84/"}],["meta",{"property":"og:site_name","content":"纸上的彩虹"}],["meta",{"property":"og:title","content":"V8引擎"}],["meta",{"property":"og:description","content":"函数即对象 对象 首先，JS中对象的值可以是任意类型的数据，如下代码所示： 上述代码内存布局如下： img 对象的属性值有三种类型： 原始类型：所谓的原始类的数据，是指值本身无法被改变，比如 JS 中的字符串就是原始类型，如果你修改了 JS 中字符串的值，那么 V8 会返回给你一个新的字符串，原始字符串并没有被改变，我们称这些类型的值为“原始值”。 J..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://file.40017.cn/baoxian/health/health_public/images/blog/blog-127.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-03T09:57:32.000Z"}],["meta",{"property":"article:tag","content":"面试"}],["meta",{"property":"article:tag","content":"浏览器"}],["meta",{"property":"article:tag","content":"待续"}],["meta",{"property":"article:modified_time","content":"2024-12-03T09:57:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"V8引擎\\",\\"image\\":[\\"https://file.40017.cn/baoxian/health/health_public/images/blog/blog-127.png\\",\\"https://file.40017.cn/baoxian/health/health_public/images/blog/blog-128.png\\",\\"https://file.40017.cn/baoxian/health/health_public/images/blog/blog-129.png\\",\\"https://file.40017.cn/baoxian/health/health_public/images/blog/blog-130.png\\",\\"https://file.40017.cn/baoxian/health/health_public/images/blog/blog-131.png\\"],\\"dateModified\\":\\"2024-12-03T09:57:32.000Z\\",\\"author\\":[]}"]]},"headers":[],"readingTime":{"minutes":3.28,"words":984},"git":{"updatedTime":1733219852000,"contributors":[{"name":"yuan.ji","email":"yuan.ji@ly.com","commits":1,"avatar":"https://avatars.githubusercontent.com/yuan.ji?v=4","url":"https://github.com/yuan.ji"}]},"autoDesc":true,"filePathRelative":"日常学习/V8.md","categoryList":[{"id":"9a91b4","sort":10004,"name":"日常学习"}],"bulletin":false}');export{r as comp,k as data};
