import{_ as a,c as i,f as n,o as e}from"./app-_cZTuvS3.js";const l={};function p(t,s){return e(),i("div",null,s[0]||(s[0]=[n(`<p>我们前端在使用 RESTFul 形式请求后端接口数据的时候，会有下面这些问题：</p><ul><li>后端返回的数据过多，前端只用到其中一部分。</li><li>后端返回的数据过少，前端需要发送多个请求到不同的 API 来组合数据。</li><li>后端 API 分散，不方便统一管理数据。</li><li>前后端工程师需要反复沟通 API 接口的数据结构。</li></ul><h2 id="为什么用-graphql" tabindex="-1"><a class="header-anchor" href="#为什么用-graphql"><span>为什么用 GraphQL</span></a></h2><p>GraphQL 则解决了这些问题，它是一种新的 API 查询语言，使用 GraphQL，前端可以：</p><ul><li>自己决定需要哪些数据。</li><li>只发送一次请求就能获得所有数据。</li><li>集中提供 API ，只有一个 API 接口。</li><li>前后端基本独立，后端的改动几乎不影响前端接口。</li></ul><p>GraphQL 同时也是后端数据提供方，数据来源可以是数据库、现有 RESTful API、文件等。</p><h2 id="graphql-结构" tabindex="-1"><a class="header-anchor" href="#graphql-结构"><span>GraphQL 结构</span></a></h2><p>GraphQL 的结构和 JavaScript 的对象结构类似：</p><ul><li>数据是按类型组织的，例如博客类型，包含博客标题、内容等。</li><li>类型中的每个属性都是强类型的，可以是 String 字符串、Int 整数、Float 浮点数，Boolean 布尔、ID 类型、数组、或者其它的自定义类型。</li><li>类型之间的关系是通过嵌套来实现的，例如有博客和评论两种类型，一个博客可以有多个评论，那么就在博客类型中用一个评论类型的数组来表示这样的关系。</li><li>多个类型组成了一个图状的结构，可以从一个类型找到它所有关联的类型，以及关联类型的关联类型，以此类推，不过有可能到某个类型的时候，又关联回了起始类型，形成了一个环，这在 GraphQL 中是允许的。</li></ul><h2 id="graphql-查询" tabindex="-1"><a class="header-anchor" href="#graphql-查询"><span>GraphQL 查询</span></a></h2><p>再来看 GraphQL 查询数据的方法。GraphQL 服务都会内置一个网页版的查询工具，可以测试 GraphQL 语句。我们还能方便的看到有哪些类型，类型里有哪些属性，关联类型的属性等：</p><p><img src="https://file.40017.cn/baoxian/health/health_public/images/blog/blog-168.png" alt="GraphQL 查询"></p><p>要查询类型中的数据，只需要在一对大括号里写上要查询的类型名，然后再用一对大括号，里边写上要查询的属性：</p><div class="language-graphql line-numbers-mode" data-ext="graphql" data-title="graphql"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">  blogs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    id</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    title</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    content</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果这个属性是一个其它类型，或者由其它类型构成的数组类型，那么还需要写上要查询它里边的哪些属性，同样使用一对大括号：</p><div class="language-graphql line-numbers-mode" data-ext="graphql" data-title="graphql"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">  blogs</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    id</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    title</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    content</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    comments</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">      id</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">      comment</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果后端 GraphQL 支持参数，用于查询符合条件的数据，这种情况下，需要使用 query 关键子定义查询的名字，然后再给支持参数的属性传递参数：</p><div class="language-graphql line-numbers-mode" data-ext="graphql" data-title="graphql"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">query</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> FirstBlog</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">  blog</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">id</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">1</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    title</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    content</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实际业务场景：</p><p>线路车列表页查询</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>{</span></span>
<span class="line"><span>  list (query: {endCity: &quot;巴中&quot;, endCityId: 1327, startCity: &quot;成都&quot;, startCityId: 1328}) {</span></span>
<span class="line"><span>          cascadeList {</span></span>
<span class="line"><span>            arrStation</span></span>
<span class="line"><span>            dptStation</span></span>
<span class="line"><span>          }</span></span>
<span class="line"><span>          groupList {</span></span>
<span class="line"><span>            minPrice</span></span>
<span class="line"><span>            tabCode</span></span>
<span class="line"><span>            tabName</span></span>
<span class="line"><span>          }</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>{</span></span>
<span class="line"><span>  list (query: {departDate: &quot;2022-09-28&quot;}) {</span></span>
<span class="line"><span>          groupList {</span></span>
<span class="line"><span>						scheduleList {</span></span>
<span class="line"><span>                arrStation</span></span>
<span class="line"><span>                dptStation</span></span>
<span class="line"><span>                dptDate</span></span>
<span class="line"><span>                dptTime</span></span>
<span class="line"><span>                showCoachType</span></span>
<span class="line"><span>                totalPrice</span></span>
<span class="line"><span>            }</span></span>
<span class="line"><span>          }</span></span>
<span class="line"><span>        }</span></span>
<span class="line"><span>}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,22)]))}const d=a(l,[["render",p],["__file","index.html.vue"]]),c=JSON.parse('{"path":"/article/wpn2lczc/","title":"GraphQL","lang":"zh-CN","frontmatter":{"title":"GraphQL","tags":["工具","待续"],"createTime":"2023/10/31","permalink":"/article/wpn2lczc/","description":"我们前端在使用 RESTFul 形式请求后端接口数据的时候，会有下面这些问题： 后端返回的数据过多，前端只用到其中一部分。 后端返回的数据过少，前端需要发送多个请求到不同的 API 来组合数据。 后端 API 分散，不方便统一管理数据。 前后端工程师需要反复沟通 API 接口的数据结构。 为什么用 GraphQL GraphQL 则解决了这些问题，它是...","head":[["meta",{"property":"og:url","content":"https://jyqwq.github.io/rainbow/article/wpn2lczc/"}],["meta",{"property":"og:site_name","content":"纸上的彩虹"}],["meta",{"property":"og:title","content":"GraphQL"}],["meta",{"property":"og:description","content":"我们前端在使用 RESTFul 形式请求后端接口数据的时候，会有下面这些问题： 后端返回的数据过多，前端只用到其中一部分。 后端返回的数据过少，前端需要发送多个请求到不同的 API 来组合数据。 后端 API 分散，不方便统一管理数据。 前后端工程师需要反复沟通 API 接口的数据结构。 为什么用 GraphQL GraphQL 则解决了这些问题，它是..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://file.40017.cn/baoxian/health/health_public/images/blog/blog-168.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-03T09:57:32.000Z"}],["meta",{"property":"article:tag","content":"工具"}],["meta",{"property":"article:tag","content":"待续"}],["meta",{"property":"article:modified_time","content":"2024-12-03T09:57:32.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"GraphQL\\",\\"image\\":[\\"https://file.40017.cn/baoxian/health/health_public/images/blog/blog-168.png\\"],\\"dateModified\\":\\"2024-12-03T09:57:32.000Z\\",\\"author\\":[]}"]]},"headers":[],"readingTime":{"minutes":2.58,"words":774},"git":{"updatedTime":1733219852000,"contributors":[{"name":"yuan.ji","email":"yuan.ji@ly.com","commits":1,"avatar":"https://avatars.githubusercontent.com/yuan.ji?v=4","url":"https://github.com/yuan.ji"}]},"autoDesc":true,"filePathRelative":"日常学习/GraphQL.md","categoryList":[{"id":"9a91b4","sort":10004,"name":"日常学习"}],"bulletin":false}');export{d as comp,c as data};
